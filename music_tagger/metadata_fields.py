class MetadataFields:
    ALBUM = "album"
    ALBUM_ARTIST = "albumartist"
    ALBUM_TYPE = "albumtype"
    ARTISTS = "artist"
    COMPOSERS = "composer"
    DATE = "date"
    DESCRIPTION = "comment"
    DETAILS = "version"
    DOWNLOAD = "download"
    DURATION = "length"
    EXPLICIT = "itunesadvisory"
    EXTENDED = "extended"
    FEATURING = "featuring"
    GENRE = "genre"
    ID = "id"
    IMAGE = "artwork"
    ISRC = "isrc"
    KEY = "initialkey"
    LABEL = "organization"
    NAME = "title"
    ORIGINALFILENAME = "originalfilename"
    PLATFORM = "platform"
    POPULARITY = "popularimeter"
    TAGS = "tags"
    TEMPO = "bpm"
    TEXT = "usertext"
    TRACK_COUNT = "trackcount"
    TRACK_NUMBER = "tracknumber"
    URL = "website"
    VERSIONS = "remixers"
    WITH = "with"

    # "albumartistsort"
    # "album"
    # "albumsort"
    # "arranger"
    # "artistsort"
    # "asin"
    # "author"
    # "barcode"
    # "catalognumber"
    # "compilation"
    # "composersort"
    # "conductor"
    # "copyright"
    # "discnumber"
    # "discsubtitle"
    # "encodedby"
    # "language"
    # "lyricist"
    # "media"
    # "mood"
    # "originaldate"
    # "performer"
    # "releasecountry"
    # "replaygain_*_gain"
    # "replaygain_*_peak"
    # "titlesort"

    @staticmethod
    def valid_fields() -> list[str]:
        fields = MetadataFields.__dict__
        fields = dict(filter(lambda item: item[0].isupper(), fields.items()))
        return list(fields.values())